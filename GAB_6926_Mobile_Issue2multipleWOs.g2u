Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.global.fcombinedqty.Declare(float)
V.global.sJobSuffix.Declare(String)
V.global.sBegJob.Declare(String)
V.global.sBegSuffix.Declare(String)
V.global.sBegJobSuffix.Declare(String)
V.global.sEndJob.Declare(String)
V.global.sEndSuffix.Declare(String)
V.global.sEndJobSuffix.Declare(String)
v.global.sLot.Declare(String)
v.Global.fLotQty.Declare(float)
V.Global.sSeq.Declare(String)
V.Global.sBin.Declare(String)
V.Global.sHeat.Declare(String)
V.Global.sSerial.Declare(String)
V.Global.sLotLoc.Declare(String)
V.Global.sWOLoc.Declare(String)
V.Global.sWOPart.Declare(String)
V.Global.sLotPart.Declare(String)
V.Global.sLotPartRev.Declare(String)
V.Global.sTransID.Declare(String)
V.Global.sTransSfx.Declare(String)
v.Global.icount.declare(long)

V.Global.sTransID.Set(V.Passed.DATA-TRANSID)
V.Global.sTransSfx.Set("0000")


Program.External.Include.Library("GAB_6926_450100.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try

'Programmed for GS Mobile
'Business Case: 
'ITI Engineering builds serialized finished goods on 1 work order per serial number. They do this
'to have 1 to 1 traceability for labor and materials. When issuing material by Lot to these WOs
'they would like to enter a range of WOs for the same finished good.

'Solution: 
'User should be able to select a beginning and ending wo and issue a single lot to all WOs in the
'range. The work orders must all be for the same finished goods part. The quantity issued should
'be the quantity required by each WO. If the quantity in the lot is not enough for all WOs in the
'range, then 0 should be issued and an error message displayed.

'Mobile form Fields
'-Beginning WO-Suffix – (WO and Suffix combined – 324134000)
'-Ending WO-Suffix – (WO and Suffix combined – 324212000)
'-Sequence – 6 character sequence from picklist report
'-Lot Number – Scanned from Label
'-Submit
'* If material quantity required > lot quantity then do not issue any. Show
'results page with message "Insufficient Quantity On Hand"
'-Operator can then choose a different lot or scan a new range of WOs.
'Always issue remaining committed quantity

'Modification Oct 2023
'Developer: Angel Tudon
'Customer: Aeronix
'Ticket: https://www.gss-service.com/Calls/CallEditInternalOpen/1397718
'Quote: 14343 - 0
'Modification to the project allows for the input of a BIN number to issue material from. If the BIN number is left blank when the transaction is submitted, the program will defer to automatically selecting the first BIN in existence that contains enough quantity on hand to satisfy the total material requirements in the WO range selected.

F.ODBC.Connection!Conx.OpenCompanyConnection(300)
F.ODBC.Connection!Cony.Opencommonconnection

V.Local.sSql.Declare(String)
v.Local.sResults.Declare(String)
v.Local.stempResults.Declare(String)

F.Intrinsic.Control.CallSub(Validate_Lot)
F.Intrinsic.Control.CallSub(Loaddata)
F.Intrinsic.Control.CallSub(Process_BatchIssueMaterial)

'WRITE SUCCESSFUL RESULT
Function.Intrinsic.Debug.Stop

'set form title
F.Intrinsic.String.Build("<tr><td style=color:Green;font-weight:bold;><center><mark>SUCCESSFUL</mark>: Issued part {1} lot {0} and bin {2} to WO range {3}{4} to {5}{6} count {7}</tr></td></center>",v.GLOBAL.sLot,v.Global.sLotPart,v.Global.sBin,v.Global.sBegJob,v.Global.sbegsuffix,v.Global.sEndJob,v.Global.sEndSuffix,v.Global.icount,v.Local.stempResults)
'build html table
f.data.datatable.exportHTML("dtmaterialreqs","WONUMBER*!*WOSUFFIX*!*WOSEQ*!*PART*!*REV*!*QUANTITY*!*LOT","WO*!*Suffix*!*Seq*!*Part*!*Rev*!*Qty*!*Lot","t01",true,v.Local.sResults)
F.INTRINSIC.STRING.BUILD("<!DOCTYPE html><html><style>table {  width:100%;}table, td {  height: 15px; font-size: 11px; border: 1px solid black;  border-collapse: collapse;}table#t01 tr:nth-child(even) {  background-color: #D3D3D3;}table#t01 tr:nth-child(odd) { background-color: #FFFFFF;}table#t01 th {  background-color: #95C26C;  color: black;}</style><body>{0}</body></html>",V.Local.sResults,V.Local.sResults)
f.Intrinsic.String.Concat(v.Local.stempResults,v.Local.sResults,v.Local.sResults)
F.Intrinsic.String.Concat("<table cellpadding = "0" cellspacing="1" border = "1">",V.local.sresults,V.Local.sResults)
F.Global.Mobile.setcustomresult(v.Caller.CompanyCode,v.global.sTransID,v.Local.sResults)

F.Intrinsic.Control.CallSub(close)

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry

Program.Sub.Main.End

Program.Sub.close.Start
F.ODBC.Connection!Conx.Close
F.ODBC.Connection!Cony.Close
F.Intrinsic.Control.If(V.DataTable.dtmaterialreqs.Exists, =, True)
	F.Data.DataTable.Close("dtmaterialreqs")
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.End
Program.Sub.close.End

Program.Sub.Validate_Lot.Start
F.Intrinsic.Control.Try
V.Local.sQuery.Declare(String)
V.Local.sLabel.Declare(String)
V.Local.iQuantity.Declare(Long)
V.Local.sCartonQty.Declare(Long)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sJobSuffix.Declare(String)
V.Local.sBegJob.Declare(String)
V.Local.sBegSuffix.Declare(String)
V.Local.sBegJobSuffix.Declare(String)
V.Local.sEndJob.Declare(String)
V.Local.sEndSuffix.Declare(String)
V.Local.sEndJobSuffix.Declare(String)
V.Local.sName.Declare(String)
V.Local.sValue.Declare(String)
V.Local.sUID.Declare(String)
V.Local.sUserid.Declare(String)
V.Local.sPrinter.Declare(String)
V.Local.sReportName.Declare(String)
V.Local.sTransID.Declare(String)
V.Local.sTransSfx.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sMPart.Declare(String)
V.Local.sMRev.Declare(String)
V.Local.sPartloc.Declare(String)
V.Local.sDescription.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sPO.Declare(String)
V.Local.sSO.Declare(String)
V.Local.sSOline.Declare(String)
V.Local.sPrefix.Declare(String)
V.Local.sTransType.Declare(String)
V.Local.sDueDate.Declare(String)
V.Local.sCloseDate.Declare(String)
V.Local.sBiRpt.Declare(String)
V.Local.dateyymmdd.Declare(String)
V.Local.timemmnnss.Declare(String)
V.Local.timehhnn.Declare(String)
V.Local.seqkey.Declare(String)
V.Local.sGSUser.Declare(String)
V.Local.sGUserid.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sMessageID.Declare(Long)
V.Local.sLot.Declare(String)
V.Local.sVendor.Declare(String)
V.Local.sResults.Declare(String)
V.Local.fLotQty.Declare(float)
V.Local.sItemHistoryLotQty.Declare(Long)
V.Local.sItemHistoryLotQtyR.Declare(Long)
V.Local.scounter.Declare(Long)
V.Local.stransIDnew.Declare(String)
V.Local.snewlot.Declare(String)
V.Local.snewlotqty.Declare(Long)
V.Local.snewlotqtytxt.Declare(String)
V.Local.sbin.Declare(String)
V.Local.slotcost.Declare(Float)
V.Local.sheat.Declare(String)
V.Local.sserial.Declare(String)
V.Local.spallet1qty.Declare(Long)
V.Local.matchtoitemhistory.Declare(String)
'added for DCC
V.Local.sIDlink.Declare(String)
V.Local.iIDLink.Declare(Long)
V.Local.sDccExists.Declare(String)
V.Local.iFileNumdcc.Declare(Long)
V.Local.sFiledcc.Declare(String)
V.Local.sHistBin.Declare(String)
V.Local.sIDLink2.Declare(String)
V.Local.iIDLink2.Declare(Long)
V.Local.sSql.Declare(String)
V.Local.sSql2.Declare(String)
v.Local.bClose.Declare(Boolean)
v.Local.fGoodPcs.Declare(float,0)
v.Local.fScrapPcs.Declare(float,0)
v.Local.sLotPart.Declare(String)
v.Local.fcombinedqty.Declare(float,0)
v.Local.fMrouterestimateperqty.Declare(float,0)
v.Local.fMrouterestimateqty.Declare(float,0)
v.Local.bisnumeric.Declare(Boolean)
V.Local.sRet.Declare(String)
V.Local.sWhere.Declare(String)

V.Local.sPrinter.Set("")
Function.Intrinsic.Debug.Stop
	F.Intrinsic.String.build("Select Field_1, Field_2, Field_3, Field_4, Field_5, Trans_Type  from WIRELESS_LINE where TRANS_ID = '{0}'",V.global.sTransID,V.Local.sQuery)
	Function.ODBC.Connection!Conx.OpenRecordsetRO("rstWIR",V.Local.squery)
	V.Local.sTransType.Set(V.ODBC.Conx!rstWIR.FieldValTrim!Trans_Type)
	V.global.sBegJobSuffix.Set(V.ODBC.Conx!rstWIR.FieldValTrim!Field_1)
	F.Intrinsic.String.left(V.global.sBegJobSuffix,6,V.global.sBegJob)
	F.Intrinsic.String.Mid(V.global.sBegJobSuffix,7,3,V.global.sBegSuffix)
	V.global.sEndJobSuffix.Set(V.ODBC.Conx!rstWIR.FieldValTrim!Field_2)
	F.Intrinsic.String.left(V.global.sEndJobSuffix,6,V.global.sEndJob)
	F.Intrinsic.String.Mid(V.global.sEndJobSuffix,7,3,V.global.sEndSuffix)		
	V.global.sSeq.Set(V.ODBC.Conx!rstWIR.FieldValTrim!Field_3)	
	V.global.sLot.Set(V.ODBC.Conx!rstWIR.FieldValTrim!Field_4)
	V.Global.sBin.Set(V.ODBC.Conx!rstWIR.FieldValTrim!Field_5)
	
F.ODBC.Conx!rstWIR.Close

F.Intrinsic.String.build("Select DEFAULT_PRINTER,LABEL_PRINTER,USER_ID  from WIRELESS_HDR where TRANS_ID = '{0}'",V.global.sTransID,V.Local.sQuery)
	Function.ODBC.Connection!Conx.OpenRecordsetRO("rstWIR1",V.Local.squery)
	V.Local.sPrinter.Set(V.ODBC.Conx!rstWIR1.FieldVal!LABEL_PRINTER)
	V.Local.sUID.Set(V.ODBC.Conx!rstWIR1.FieldVal!USER_ID)
	
'get WO loc
F.Intrinsic.String.Build("select LOCATION from V_JOB_HEADER where JOB='{0}' AND SUFFIX='{1}'",V.Global.sBegJob,V.Global.sBegSuffix,V.Local.sSql)
	F.ODBC.Connection!Conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	v.Global.sWOLoc.Set(v.Local.sRet)

'get lot quantity and LBHS data
'Generate where clause depending on whether or not a BIN was passed
F.Intrinsic.Control.If(V.Global.sBin, =, "")
	F.Intrinsic.String.Build("WHERE ALLOCATED <> 'Y' AND LOT = '{0}' AND QUANTITY > 0 AND LOCATION = '{1}'",V.Global.sLot,V.Global.sWOLoc,V.Local.sWhere)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("WHERE ALLOCATED <> 'Y' AND LOT = '{0}' AND QUANTITY > 0 AND LOCATION = '{1}' AND BIN = '{2}'",V.Global.sLot,V.Global.sWOLoc,V.Global.sBin,V.Local.sWhere)
F.Intrinsic.Control.EndIf

'Build query
F.Intrinsic.String.Build("select TOP 1 PART,LOCATION,LOT,BIN,HEAT,SERIAL_NUMBER,QUANTITY from V_ITEM_MASTER {0}",V.Local.sWhere,V.Local.sSql)
Function.ODBC.Connection!Conx.OpenRecordsetRO("rstitem",V.Local.sSql)

F.Intrinsic.Control.If(V.ODBC.Conx!rstitem.EOF,=,False)
	V.global.sLotPart.Set(V.ODBC.Conx!rstitem.FieldValTrim!PART)
	V.global.sLotLoc.Set(V.ODBC.Conx!rstitem.FieldValTrim!LOCATION)
	V.global.sHeat.Set(V.ODBC.Conx!rstitem.FieldValTrim!HEAT)
	V.global.sSerial.Set(V.ODBC.Conx!rstitem.FieldValTrim!SERIAL_NUMBER)
	V.global.sBin.Set(V.ODBC.Conx!rstitem.FieldValTrim!BIN)
	V.global.fLotQty.Set(V.ODBC.Conx!rstitem.FieldValTrim!QUANTITY)

F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("<tr><td style=color:Red;font-weight:bold;><center><mark>FAILED</mark>: Lot {0} Bin {1} combination does not exist, has 0 qty available or allocated</tr></td></center>",v.Global.sLot,v.Global.sBin,v.Local.sResults)
	F.Global.Mobile.setcustomresult(v.Caller.CompanyCode,v.global.sTransID,v.Local.sResults)
	f.Intrinsic.Control.CallSub(close)
f.Intrinsic.Control.EndIf

F.ODBC.Conx!rstitem.Close
	
F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.Validate_Lot.End

Program.Sub.Loaddata.Start
F.Intrinsic.Control.Try
V.Local.sSql.Declare(String)
V.Local.sResults.Declare(String)
v.Local.bRev.Declare(Boolean,False)
'Function.Intrinsic.Debug.InvokeDebugger
Function.Intrinsic.Debug.Stop

'Load datatable of all material requirements within WO range

'read the SS > Company Options (Standard) > Inventory > Use Revision Level/Engineering Change
F.Global.General.ReadOption(070008, 0, False, V.Local.bRev)
F.Intrinsic.Control.If(V.Local.bRev)
	f.Intrinsic.String.Mid(v.Global.sLotPart,18,3,v.Global.sLotPartRev)
'	F.Intrinsic.String.Build("select O.JOB AS WONUMBER, O.SUFFIX AS WOSUFFIX, O.SEQ AS WOSEQ, left(O.PART,17) AS PART, substring(O.PART,18,3) AS REV, (O.HOURS_ESTIMATED - O.HOURS_ACTUAL) AS QUANTITY, H.LOCATION from V_JOB_OPERATIONS O LEFT OUTER JOIN V_JOB_HEADER H ON O.JOB=H.JOB AND O.SUFFIX=H.SUFFIX where LMO = 'M' and O.flag_closed <> 'Y'  and H.DATE_CLOSED = '1900-01-01' and WOSEQ = '{0}' and WONUMBER >= '{1}' and WONUMBER <='{2}' and WOSUFFIX >= '{3}' and WOSUFFIX <='{4}' and PART = '{5}' and REV = '{6}'",V.global.sSeq,V.global.sBegJob,V.global.sEndJob,V.global.sBegSuffix,V.global.sEndSuffix,v.Global.sLotPart.Left17,v.Global.sLotPartRev,V.Local.sSql)
'1/25/23 updated to allow part to be issued with any revision level
F.Intrinsic.String.Build("select O.JOB AS WONUMBER, O.SUFFIX AS WOSUFFIX, O.SEQ AS WOSEQ, left(O.PART,17) AS PART, substring(O.PART,18,3) AS REV, (O.HOURS_ESTIMATED - O.HOURS_ACTUAL) AS QUANTITY, H.LOCATION from V_JOB_OPERATIONS O LEFT OUTER JOIN V_JOB_HEADER H ON O.JOB=H.JOB AND O.SUFFIX=H.SUFFIX where LMO = 'M' and O.flag_closed <> 'Y'  and H.DATE_CLOSED = '1900-01-01' and WOSEQ = '{0}' and WONUMBER >= '{1}' and WONUMBER <='{2}' and WOSUFFIX >= '{3}' and WOSUFFIX <='{4}' and PART = '{5}'",V.global.sSeq,V.global.sBegJob,V.global.sEndJob,V.global.sBegSuffix,V.global.sEndSuffix,v.Global.sLotPart.Left17,v.Global.sLotPartRev,V.Local.sSql)
F.Intrinsic.Control.Else
F.Intrinsic.String.Build("select O.JOB AS WONUMBER, O.SUFFIX AS WOSUFFIX, O.SEQ AS WOSEQ, PART, '' AS REV, (O.HOURS_ESTIMATED - O.HOURS_ACTUAL) AS QUANTITY, H.LOCATION from V_JOB_OPERATIONS O LEFT OUTER JOIN V_JOB_HEADER H ON O.JOB=H.JOB AND O.SUFFIX=H.SUFFIX where LMO = 'M' and O.flag_closed <> 'Y'  and H.DATE_CLOSED = '1900-01-01' and WOSEQ = '{0}' and WONUMBER >= '{1}' and WONUMBER <='{2}' and WOSUFFIX >= '{3}' and WOSUFFIX <='{4}' and PART = '{5}'",V.global.sSeq,V.global.sBegJob,V.global.sEndJob,V.global.sBegSuffix,V.global.sEndSuffix,v.Global.sLotPart,V.Local.sSql)
F.Intrinsic.Control.EndIf
F.Data.DataTable.CreateFromSQL("dtmaterialreqs", "conx", V.Local.ssql, True)
'calculate total material qty for WO range
F.Data.DataTable.Compute("dtmaterialreqs","SUM(QUANTITY)","",V.global.fcombinedqty)
F.Data.DataTable.Compute("dtmaterialreqs","count(WONUMBER)","",V.global.icount)
F.Data.DataTable.AddColumn("dtmaterialreqs","LOT",String)
F.Data.DataTable.AddColumn("dtmaterialreqs","SERIAL",String)
F.Data.DataTable.AddColumn("dtmaterialreqs","HEAT",String)
F.Data.DataTable.AddColumn("dtmaterialreqs","BIN",String)
F.Data.DataTable.AddColumn("dtmaterialreqs","LOTPART",String)
F.Data.DataTable.AddColumn("dtmaterialreqs","LOTLOCATION",String)
F.Data.DataTable.SetValue("dtmaterialreqs",-1,"LOTPART",V.global.sLotPart)
F.Data.DataTable.SetValue("dtmaterialreqs",-1,"LOT",V.global.sLot)
F.Data.DataTable.SetValue("dtmaterialreqs",-1,"HEAT",V.global.sHeat)
F.Data.DataTable.SetValue("dtmaterialreqs",-1,"BIN",V.global.sBin)
F.Data.DataTable.SetValue("dtmaterialreqs",-1,"SERIAL",V.global.sSerial)
F.Data.DataTable.SetValue("dtmaterialreqs",-1,"LOTLOCATION",V.global.sLotLoc)

'Validate Lot Quantity can fill WO range Requirements
F.Intrinsic.Control.If(V.Global.fLotQty,<,v.Global.fcombinedqty)
	F.Intrinsic.String.Build("<tr><td style=color:Red;font-weight:bold;><center><mark>FAILED</mark>: WO range from {0}-{1} to {2}-{3} requires Qty {4} where Lot {5} Bin {6} only has {7}</tr></td></center>",v.Global.sBegJob,v.Global.sBegSuffix,v.Global.sEndJob,v.Global.sEndSuffix,v.Global.fcombinedqty,v.Global.sLot,v.Global.sBin,v.Global.fLotQty,v.Local.sResults)
	F.Global.Mobile.setcustomresult(v.Caller.CompanyCode,v.global.sTransID,v.Local.sResults)
	f.Intrinsic.Control.CallSub(close)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.Loaddata.End

Program.Sub.Process_BatchIssueMaterial.Start
F.Intrinsic.Control.Try
V.Local.sResults.Declare(String)
V.Local.iCounter.Declare(Long)
Function.Intrinsic.Debug.Stop

F.Intrinsic.Control.If(V.DataTable.dtmaterialreqs.Exists, =, False,"OR",V.Global.icount,=,0)
	F.Intrinsic.String.Build("<tr><td style=color:Red;font-weight:bold;><center><mark>FAILED</mark>: No open WO requirements for WO range scanned {0}{1} to {2}{3} for lot {5} part {7}</tr></td></center>",v.Global.sBegJob,v.Global.sBegSuffix,v.Global.sEndJob,v.Global.sEndSuffix,v.Global.fcombinedqty,v.Global.sLot,v.Global.fLotQty,v.Global.sLotPart,v.Local.sResults)
	F.Global.Mobile.setcustomresult(v.Caller.CompanyCode,v.Global.sTransID,v.Local.sResults)
	f.Intrinsic.Control.CallSub(close)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'add lines to the 450100 callwrapper DT
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtmaterialreqs.RowCount--, 1)
	F.Data.DataTable.AddRow("450100", "Part", V.DataTable.dtmaterialreqs(V.Local.iCounter).Part!FieldValTrim, "Rev", V.DataTable.dtmaterialreqs(V.Local.iCounter).Rev!FieldValTrim, "Quantity", V.DataTable.dtmaterialreqs(V.Local.iCounter).Quantity!FieldVal, "Location", V.DataTable.dtmaterialreqs(V.Local.iCounter).Location!FieldValTrim, "Lot", V.DataTable.dtmaterialreqs(V.Local.iCounter).Lot!FieldValTrim, "Bin", V.DataTable.dtmaterialreqs(V.Local.iCounter).Bin!FieldValTrim, "Heat", V.DataTable.dtmaterialreqs(V.Local.iCounter).Heat!FieldValTrim, "Serial", V.DataTable.dtmaterialreqs(V.Local.iCounter).Serial!FieldValTrim, "WONumber", V.DataTable.dtmaterialreqs(V.Local.iCounter).WONumber!FieldValTrim, "WOSuffix", V.DataTable.dtmaterialreqs(V.Local.iCounter).WOSuffix!FieldValTrim, "WOSeq", V.DataTable.dtmaterialreqs(V.Local.iCounter).WOSeq!FieldValTrim)
F.Intrinsic.Control.Next(V.Local.iCounter)
Function.Intrinsic.Debug.Stop

'****************************************************
'do until loop until text file does not exist
V.Local..BulkDeclareString(sFileName,sFilePath)
V.Local.bExists.Declare(Boolean,True)

'Define file path
	F.Intrinsic.String.Build("L{0}{1}{2}.txt",V.Caller.CompanyCode,V.Caller.Terminal,v.Global.sTransID.Right7,V.Local.sFileName)
	'Set fully qualified path to create the file
	F.Intrinsic.String.Build("{0}\{1}",V.Caller.FilesDir,V.Local.sFileName,V.Local.sFilePath)

'Wait to continue until file does not exist
F.Intrinsic.Control.DoUntil(v.Local.bExists,=,False)
	F.Intrinsic.File.Exists(v.Local.sFilePath,V.Local.bExists)
	Function.Intrinsic.UI.Sleep(5)
F.Intrinsic.Control.Loop
'****************************************************

F.Intrinsic.Control.CallSub(450100ASync,"TransID",v.Global.sTransID)

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.Process_BatchIssueMaterial.End

Program.Sub.Catching.Start
V.Local..BulkDeclareString(sError)
F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}",V.Caller.ScriptFile,V.Ambient.NewLine,v.Args.sub,V.Args.errorno,V.args.errordesc,V.Local.sError)
F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.End
Program.Sub.Catching.End

Program.Sub.Comments.Start
${$0$}$ATG-Transactions-ADD_CONTACT$}$TSP$}$08/27/12
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$Quote Number: 4796
${$4$}$0$}$$}$0$}$-1$}$Brady$}$03/31/16 9:07:06 PM$}$Modified script to support document control item links for J55 return to stock.  Copies links from item record of original lot/bin to the new bin returned to from Job
${$5$}$2.0.0.0$}$2
${$6$}$Angel$}$20231115121328955$}$KXl0r/FkrMYwb/r4ukQ87VNzvoHa8Zo7wHQB+NMLNKI5CEQc2lnQNqj7I3ltnwS6S59aukF9FjU=
Program.Sub.Comments.End

